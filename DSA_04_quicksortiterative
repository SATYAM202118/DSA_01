#include<iostream>
using namespace std;
void swap(int* num1, int* num2) { 
    int temp = *num1; 
    *num1 = *num2; 
    *num2 = temp; 
}
int partition(int Arr[], int first, int last) { 
    int x = Arr[last]; 
    int i = (first - 1); 
    
    for (int j = first; j <= last - 1; j++) { 
        if (Arr[j] <= x) { 
            i++; 
            swap(&Arr[i], &Arr[j]); 
        } 
    } 
    swap(&Arr[i + 1], &Arr[last]); 
    return (i + 1); 
}

void quickSortIterative(int Arr[], int first, int last) {
    int stack[last - first + 1]; 
    int top = -1;
    stack[++top] = first; 
    stack[++top] = last;
    while (top >= 0){
        last = stack[top--]; 
        first = stack[top--];

        int p = partition(Arr, first, last);
        if (p - 1 > first) { 
            stack[++top] = first; 
            stack[++top] = p - 1; 
        }
        if (p + 1 < last) { 
             stack[++top] = p + 1; 
             stack[++top] = last; 
        } 
    } 
} 

void printArr(int Arr[], int n) { 
    int i; 
    for (i = 0; i < n; ++i){ 
        cout<<Arr[i]<<endl;
    } 
} 

int main() {
    int Arr[] = {7,5,10,22,8,2,4,1}; 
    int n = sizeof(Arr) / sizeof(*Arr); 
    quickSortIterative(Arr, 0, n - 1);
    for(int i=0;i<n;i++)
    cout<<Arr[i]<<" ";
return 0; 
} 
